7.1. Entendendo o funcionamento de um pool de conexões

Aplicação sem pool de conexões:

RequesiçãoHTTP 1 -------> AplicaçãoWeb ----%--->  __
RequesiçãoHTTP 2 -------> AplicaçãoWeb ----%---> |  |
RequesiçãoHTTP 3 -------> AplicaçãoWeb ----%---> |BD|
RequesiçãoHTTP 4 -------> AplicaçãoWeb ----%---> |  |
RequesiçãoHTTP 5 -------> AplicaçãoWeb ----%---> |__|

-> a cada requisição é criada uma nova conexão. (%), fim da requisição a conexão é encerrada (X)

Aplicação com pool de conexões:

Pool de conexões -> é um componente de software que mantem um conjunto de conexões
com o banco de dados para reutilização numa aplicação.

-> Uma mesma conexão é utilizada varias vezes na aplicação,
 reduzindo o tempo gasto na criação de novas aplicações

-> ao iniciar a aplicação, ela ja cria um determinado numero de conexões (definido na configuração)
e armazena no POOL de conexões. De maneira que quando for preciso a conexão
ela já estara preparada.

-> Se a conexão criada não estiver sendo utilizada ela fica ociosa(IDLE).

-> Quando for preciso ela realiza a operação utilizando a conexão ociosa, mudando o estado dela,
e no fim volta para IDLE.

-> Caso seja venha um numero maior de requisições do que o minimo definido na configuração, 
ele cria mais conexões, porem se a  qauntidade requisições de ultrapassar o limite maximo
de conexões denifido no na configuração, o processos fica na fila (esperando sua vez).
	-> no fim todas as antigas e novas conexões ficam ociosas.
	-> porém depois de um tempo, caso não existam novas requisições utilizando as conxeções
	extra, ele encerra as conexeções e volta para o minimo definido.

7.2. Conhecendo o Hikari: a solução padrão de pool de conexões no Spring Boot

Hikari: Pool de conexões padrão do starter data jpa

7.3. Configurando o pool de conexões do Hikari

em application.properties:

// numero diferente de conexões
					// numero maximo de conexões, por padrão é 10
spring.datasource.hikari.maximum-pool-size=5

					// minimo de 3 conexões
spring.datasource.hikari.minimum-idle=3
		
		// tempo limite de ociosidade	// tempo em milissecundos
spring.datasource.hikari.idle-timeout=10000		// min 10 segundos
	

7.4. Schema generation em produção não é uma boa prática

				// dropa e cria nova tabela
spring.jpa.hibernate.ddl-auto=create
				// isso não é usual em produção

	// atualiza no schema
spring.jpa.hibernate.ddl-auto=update


7.5. Flyway: ferramenta de versionamento de schemas de banco de dados

7.6. Adicionando o Flyway no projeto e criando a primeira migração

passo 1: Desabilite o schema generate do hibernate

#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update

passo 2: Excluir tabelas já existentes da base de dados

passo 3: Nova dependencia Flyway migration

Caso utilize o MySQL, adicione:
<dependency>
  <groupId>org.flywaydb</groupId>
  <artifactId>flyway-mysql</artifactId>
</dependency>

passo 4: Dentro da pasta : src/main/resources

-> nova pasta : db/migration

passo 5: primeiro script de migração


Todo script incremental é uma migration

CREATE TABLE cozinha (
    id BIGINT NOT NULL AUTO_INCREMENT,
    nome VARCHAR(60) NOT NULL,
    PRIMARY KEY(id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

passo 6: defindo nome do arquivo dentro de: src/main/resources/db/migration

V numero de versão __(dois underline) DESCRIÇÃO .sql

ex1: Zeros
V001__tabela-cozinha.sql

ex2: Ponto
V1.1__tabela-cozinha.sql

ex3: Underline
V1_2__tabela-cozinha.sql

ex4: Data
V2023032100130__tabela-cozinha.sql

passo 7: adicione o script de migração dentro do arquivo criado 

passo 8: repare que foi criado um 'flyway_schema_history'
	-> é uma tabela de controle, onde ele vai gerencia as migrações.
	
OBS: não é boa pratica utilizar DML como migration no flyway.


7.7. Evoluindo o banco de dados com novas migrações


#OBS: 	Não crie arquivos de migração com sua aplicação rodando;
	Caso voce não pare a aplicação dará um erro de conflito.
#OBS: 	Não é possivel alterar o nome do arquivo de migração nem seu conteudo.


Criando nova migração:

V002__cria-tabela-cozinha.sql

CREATE TABLE  cidade (
    id BIGINT NOT NULL AUTO_INCREMENT,
    nome_cidade VARCHAR(80) NOT NULL,
    nome_estado VARCHAR(80) NOT NULL,
    
    PRIMARY KEY(id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


7.8. Criando migrações complexas com remanejamento de dados

Situação Problema:

Meu sistema já possui uma TABELA chamada "cidade" e dentro 
da "cidade" existe a coluna "nome_estado". Quero remover essa coluna
e criar uma nova TABELA "estado". Onde a "TABELA "cidade" irá
refenrenciar o estado pelo seu id('estado_id'). 
OBS: Não posso perder dados.

---------------------------------
MIGRATION: V003__cria-tabela-estado.sql

CREATE TABLE  estado (id BIGINT NOT NULL AUTO_INCREMENT,nome VARCHAR(80) NOT NULL,PRIMARY KEY(id))ENGINE=InnoDB DEFAULT CHARSET=utf8;


INSERT INTO estado (nome) SELECT DISTINCT nome_estado from cidade;


ALTER TABLE cidade ADD COLUMN estado_id BIGINT NOT NULL;


SET sql_safe_updates=0;
UPDATE cidade c SET c.estado_id =  (SELECT e.id FROM estado e  WHERE e.nome = c.nome_estado);


# Altere a tabela cidade e adicione a constraint onde ela é uma chave estrangeira de estado_id, onde ela referencia a coluna id na tabela estado
ALTER TABLE cidade ADD CONSTRAINT fk_cidade_estado FOREIGN KEY (estado_id) REFERENCES estado(id);


ALTER TABLE cidade DROP COLUMN nome_estado;


ALTER TABLE cidade CHANGE nome_cidade nome VARCHAR(80) NOT NULL;

---------------------------------
Fazendo Dump do banco de dados:

mysqldump --host localhost --user root --password --databases algafood > dump.sql

Para criar o database "algafood" a partir do dump, execute o comando:

mysql --host localhost --user root --password < dump.sql


7.9. Criando migração a partir de DDL gerado por schema generation

em app.properties:

spring.jpa.properties.

spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources

OBS: Comente ou remova essas duas propriedades logo após a criação do DDL.
Só precisamos disso para criar o arquivo apenas uma vez.


















 