7.1. Entendendo o funcionamento de um pool de conexões

Aplicação sem pool de conexões:

RequesiçãoHTTP 1 -------> AplicaçãoWeb ----%--->  __
RequesiçãoHTTP 2 -------> AplicaçãoWeb ----%---> |  |
RequesiçãoHTTP 3 -------> AplicaçãoWeb ----%---> |BD|
RequesiçãoHTTP 4 -------> AplicaçãoWeb ----%---> |  |
RequesiçãoHTTP 5 -------> AplicaçãoWeb ----%---> |__|

-> a cada requisição é criada uma nova conexão. (%), fim da requisição a conexão é encerrada (X)

Aplicação com pool de conexões:

Pool de conexões -> é um componente de software que mantem um conjunto de conexões
com o banco de dados para reutilização numa aplicação.

-> Uma mesma conexão é utilizada varias vezes na aplicação,
 reduzindo o tempo gasto na criação de novas aplicações

-> ao iniciar a aplicação, ela ja cria um determinado numero de conexões (definido na configuração)
e armazena no POOL de conexões. De maneira que quando for preciso a conexão
ela já estara preparada.

-> Se a conexão criada não estiver sendo utilizada ela fica ociosa(IDLE).

-> Quando for preciso ela realiza a operação utilizando a conexão ociosa, mudando o estado dela,
e no fim volta para IDLE.

-> Caso seja venha um numero maior de requisições do que o minimo definido na configuração, 
ele cria mais conexões, porem se a  qauntidade requisições de ultrapassar o limite maximo
de conexões denifido no na configuração, o processos fica na fila (esperando sua vez).
	-> no fim todas as antigas e novas conexões ficam ociosas.
	-> porém depois de um tempo, caso não existam novas requisições utilizando as conxeções
	extra, ele encerra as conexeções e volta para o minimo definido.

7.2. Conhecendo o Hikari: a solução padrão de pool de conexões no Spring Boot

Hikari: Pool de conexões padrão do starter data jpa

7.3. Configurando o pool de conexões do Hikari

em application.properties:

// numero diferente de conexões
					// numero maximo de conexões, por padrão é 10
spring.datasource.hikari.maximum-pool-size=5

					// minimo de 3 conexões
spring.datasource.hikari.minimum-idle=3
		
		// tempo limite de ociosidade	// tempo em milissecundos
spring.datasource.hikari.idle-timeout=10000		// min 10 segundos
	

7.4. Schema generation em produção não é uma boa prática

				// dropa e cria nova tabela
spring.jpa.hibernate.ddl-auto=create
				// isso não é usual em produção

	// atualiza no schema
spring.jpa.hibernate.ddl-auto=update


7.5. Flyway: ferramenta de versionamento de schemas de banco de dados

7.6. Adicionando o Flyway no projeto e criando a primeira migração

passo 1: Desabilite o schema generate do hibernate

#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update

passo 2: Excluir tabelas já existentes da base de dados

passo 3: Nova dependencia Flyway migration

Caso utilize o MySQL, adicione:
<dependency>
  <groupId>org.flywaydb</groupId>
  <artifactId>flyway-mysql</artifactId>
</dependency>

passo 4: Dentro da pasta : src/main/resources

-> nova pasta : db/migration

passo 5: primeiro script de migração


Todo script incremental é uma migration

CREATE TABLE cozinha (
    id BIGINT NOT NULL AUTO_INCREMENT,
    nome VARCHAR(60) NOT NULL,
    PRIMARY KEY(id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

passo 6: defindo nome do arquivo dentro de: src/main/resources/db/migration

V numero de versão __(dois underline) DESCRIÇÃO .sql

ex1: Zeros
V001__tabela-cozinha.sql

ex2: Ponto
V1.1__tabela-cozinha.sql

ex3: Underline
V1_2__tabela-cozinha.sql

ex4: Data
V2023032100130__tabela-cozinha.sql

passo 7: adicione o script de migração dentro do arquivo criado 

passo 8: repare que foi criado um 'flyway_schema_history'
	-> é uma tabela de controle, onde ele vai gerencia as migrações.
	
OBS: não é boa pratica utilizar DML como migration no flyway.


7.7. Evoluindo o banco de dados com novas migrações


#OBS: 	Não crie arquivos de migração com sua aplicação rodando;
	Caso voce não pare a aplicação dará um erro de conflito.
#OBS: 	Não é possivel alterar o nome do arquivo de migração nem seu conteudo.


Criando nova migração:

V002__cria-tabela-cozinha.sql

CREATE TABLE  cidade (
    id BIGINT NOT NULL AUTO_INCREMENT,
    nome_cidade VARCHAR(80) NOT NULL,
    nome_estado VARCHAR(80) NOT NULL,
    
    PRIMARY KEY(id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


7.8. Criando migrações complexas com remanejamento de dados

Situação Problema:

Meu sistema já possui uma TABELA chamada "cidade" e dentro 
da "cidade" existe a coluna "nome_estado". Quero remover essa coluna
e criar uma nova TABELA "estado". Onde a "TABELA "cidade" irá
refenrenciar o estado pelo seu id('estado_id'). 
OBS: Não posso perder dados.

---------------------------------
MIGRATION: V003__cria-tabela-estado.sql

CREATE TABLE  estado (id BIGINT NOT NULL AUTO_INCREMENT,nome VARCHAR(80) NOT NULL,PRIMARY KEY(id))ENGINE=InnoDB DEFAULT CHARSET=utf8;


INSERT INTO estado (nome) SELECT DISTINCT nome_estado from cidade;


ALTER TABLE cidade ADD COLUMN estado_id BIGINT NOT NULL;


SET sql_safe_updates=0;
UPDATE cidade c SET c.estado_id =  (SELECT e.id FROM estado e  WHERE e.nome = c.nome_estado);


# Altere a tabela cidade e adicione a constraint onde ela é uma chave estrangeira de estado_id, onde ela referencia a coluna id na tabela estado
ALTER TABLE cidade ADD CONSTRAINT fk_cidade_estado FOREIGN KEY (estado_id) REFERENCES estado(id);


ALTER TABLE cidade DROP COLUMN nome_estado;


ALTER TABLE cidade CHANGE nome_cidade nome VARCHAR(80) NOT NULL;

---------------------------------
Fazendo Dump do banco de dados:

mysqldump --host localhost --user root --password --databases algafood > dump.sql

Para criar o database "algafood" a partir do dump, execute o comando:

mysql --host localhost --user root --password < dump.sql


7.9. Criando migração a partir de DDL gerado por schema generation

em app.properties:

spring.jpa.properties.

spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

OBS: Comente ou remova essas duas propriedades logo após a criação do DDL.
Só precisamos disso para criar o arquivo apenas uma vez.

não é usual utilizar o ddl.sql para criar as tabelas.
pois podem existir problemas. Porém caso vá utilizar é bom que seja revisado


7.10. Adicionando dados de testes com callback do Flyway

afterMigrate.sql
{
comandos de insert
}

evitando erros de duplicadas: insert ignore ...


deletando dados das tabelas toda vez que restarta a aplicação:

set foreign_key_checks = 0; // desabilitando checagem de chaves estrangeiras.

delete from tabelaX;

delete from tabelaY; ....

set foreing_key_checks = 1;

alter table tabelaX auto_increment = 1;
....

resto dos comandos:

ex: 

set foreign_key_checks = 0;

delete from cidade;
delete from cozinha;
delete from estado;
delete from forma_pagamento;
delete from grupo;
delete from grupo_permissao;
delete from permissao;
delete from produto;
delete from restaurante;
delete from restaurante_forma_pagamento;
delete from usuario;
delete from usuario_grupo;

set foreign_key_checks = 1;

alter table cidade auto_increment = 1;
alter table cozinha auto_increment = 1;
alter table estado auto_increment = 1;
alter table forma_pagamento auto_increment = 1;
alter table grupo auto_increment = 1;
alter table permissao auto_increment = 1;
alter table produto auto_increment = 1;
alter table restaurante auto_increment = 1;
alter table usuario auto_increment = 1;

insert into cozinha (id, nome) values (1, 'Tailandesa');
insert into cozinha (id, nome) values (2, 'Indiana');
insert into cozinha (id, nome) values (3, 'Argentina');
insert into cozinha (id, nome) values (4, 'Brasileira');

insert into estado (id, nome) values (1, 'Minas Gerais');
insert into estado (id, nome) values (2, 'São Paulo');
insert into estado (id, nome) values (3, 'Ceará');

insert into cidade (id, nome, estado_id) values (1, 'Uberlândia', 1);
insert into cidade (id, nome, estado_id) values (2, 'Belo Horizonte', 1);
insert into cidade (id, nome, estado_id) values (3, 'São Paulo', 2);
insert into cidade (id, nome, estado_id) values (4, 'Campinas', 2);
insert into cidade (id, nome, estado_id) values (5, 'Fortaleza', 3);

insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao, endereco_cidade_id, endereco_cep, endereco_logradouro, endereco_numero, endereco_bairro) values (1, 'Thai Gourmet', 10, 1, utc_timestamp, utc_timestamp, 1, '38400-999', 'Rua João Pinheiro', '1000', 'Centro');
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (2, 'Thai Delivery', 9.50, 1, utc_timestamp, utc_timestamp);
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (3, 'Tuk Tuk Comida Indiana', 15, 2, utc_timestamp, utc_timestamp);
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (4, 'Java Steakhouse', 12, 3, utc_timestamp, utc_timestamp);
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (5, 'Lanchonete do Tio Sam', 11, 4, utc_timestamp, utc_timestamp);
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (6, 'Bar da Maria', 6, 4, utc_timestamp, utc_timestamp);

insert into forma_pagamento (id, descricao) values (1, 'Cartão de crédito');
insert into forma_pagamento (id, descricao) values (2, 'Cartão de débito');
insert into forma_pagamento (id, descricao) values (3, 'Dinheiro');

insert into permissao (id, nome, descricao) values (1, 'CONSULTAR_COZINHAS', 'Permite consultar cozinhas');
insert into permissao (id, nome, descricao) values (2, 'EDITAR_COZINHAS', 'Permite editar cozinhas');

insert into restaurante_forma_pagamento (restaurante_id, forma_pagamento_id) values (1, 1), (1, 2), (1, 3), (2, 3), (3, 2), (3, 3), (4, 1), (4, 2), (5, 1), (5, 2), (6, 3);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Porco com molho agridoce', 'Deliciosa carne suína ao molho especial', 78.90, 1, 1);
insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Camarão tailandês', '16 camarões grandes ao molho picante', 110, 1, 1);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Salada picante com carne grelhada', 'Salada de folhas com cortes finos de carne bovina grelhada e nosso molho especial de pimenta vermelha', 87.20, 1, 2);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Garlic Naan', 'Pão tradicional indiano com cobertura de alho', 21, 1, 3);
insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Murg Curry', 'Cubos de frango preparados com molho curry e especiarias', 43, 1, 3);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Bife Ancho', 'Corte macio e suculento, com dois dedos de espessura, retirado da parte dianteira do contrafilé', 79, 1, 4);
insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('T-Bone', 'Corte muito saboroso, com um osso em formato de T, sendo de um lado o contrafilé e do outro o filé mignon', 89, 1, 4);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Sanduíche X-Tudo', 'Sandubão com muito queijo, hamburger bovino, bacon, ovo, salada e maionese', 19, 1, 5);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Espetinho de Cupim', 'Acompanha farinha, mandioca e vinagrete', 8, 1, 6);


novo problema: after migrate que será executado em todos os ambientes

db/testdata/aftermigration.sql

7.11 - Corrigindo migrações que falham

V005__cria-tabela-errada.sql

create table teste (
	id bigint not null auto_increment
	primary key (id)
) engine=InnoDB charset=utf8;


Corrigindo :

repara no historico da tabela.

flyway_schema_history => deleta a linha da versao que ta com erro


outra forma dentro da pasta do projeto:

./mvnw flyway:repair -Dflyway.configFiles=src/main/resources/flyway.properties

novo arquivo
resources/flyway.properties 
flyway.url= url da database
flyway.user=root
flyway.password= 


7.12. Desafio: Criando migrações e mapeando as entidades Pedido e ItemPedido







 