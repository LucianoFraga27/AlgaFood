5.1. Implementando consultas JPQL em repositórios

JPQL -> Linguagem de consultas do JPA

Na classe CozinhaRepositoryImplements, troque @Component por @Repository.

Pois essa Anotação, além da semantica, ela é uma tradutora de Exceptions.

Em cozinhaRepository criar novo método: 

List<Cozinha> consultarPorNome(String nome);

Agora implemente:

@Override
	public List<Cozinha> consultarPorNome(String nomeCozinha) {
		return manager.createQuery("from Cozinha where nome = :nome",Cozinha.class)
				.setParameter("nome", nomeCozinha)
				.getResultList();
	}


controller:

@RequestParam("nome")
@RequestParam  -> Query Params : Key -> nome | value : x 

Get mapping: /cozinhas/por-nome
	
// QUERY STRINGS
	@GetMapping("/cozinhas/por-nome")
	public List<Cozinha> consltapornome(@RequestParam String nome) {
		return cozinhaRepository.consultarPorNome(nome);
		
	}



5.2. Conhecendo o projeto Spring Data JPA (SDJ)

Nos repositorios existem muitos códigos repetitivos.
Para evitar isso podemos implementar repositorios genericos,
e o Spring Data JPA fornece isso para os desenvolvedores.

5.3. Criando um repositório com Spring Data JPA (SDJ)

Transformando repositorio em repositorio spring data jpa.

Excluir a implementação feita antes para pordemos utilizar 
a que o Spring Data JPA fornece.

Exemplo de repositorio

@Repository
public interface MeuRepositorio extends JpaRepository<Tipo_Entidade, Tipo_Id_Entidade>{
	
}

O JpaRepository é uma interface que faz parte do Spring Data JPA,
que é um framework que facilita a implementação do padrão de persistência
de dados usando a API JPA. Alguns dos principais métodos disponíveis no
JpaRepository são:

1- save(T entity): salva ou atualiza uma entidade no banco de dados.
Se a entidade já existir no banco de dados, ela é atualizada; 
caso contrário, uma nova linha é inserida na tabela correspondente.

2- deleteById(ID id): exclui uma entidade do banco de dados com base no seu ID.

3- findById(ID id): busca uma entidade no banco de dados com base no seu ID.

4- findAll(): busca todas as entidades no banco de dados e retorna uma lista com elas.

5- count(): retorna o número total de entidades no banco de dados.

6- existsById(ID id): verifica se uma entidade com o ID fornecido existe no banco de dados.

Esses são apenas alguns dos métodos disponíveis no JpaRepository. Existem muitos outros,
incluindo métodos para fazer consultas mais complexas e personalizadas no banco de dados,
por exemplo, usando as palavras-chave "findBy" e "query". Além disso, o JpaRepository também
oferece suporte para paginação e ordenação dos resultados. Em geral, o objetivo principal
do JpaRepository é fornecer uma interface simples e intuitiva para realizar operações de
persistência de dados em um banco de dados usando a API JPA.






















