11.1. Analisando e definindo melhor o escopo das transações

@Transactional -> abre uma transação quando o método é chamado. O método só executado se tiver uma transação. 

Todos os métodos publicos que tem mudança no banco de dados é legal que tenha a notação
@Transactional.

Evitar problemas de inconsistencia no banco de dados.


11.2. Refinando o payload de cadastro com @JsonIgnoreProperties


@JsonIgnoreProperties(value={"nome"}, allowGetters = true) 	// Ignore a propriedade 'nome' do atributo cozinha, apenas na desserialização; // Ignorando apenas no set
private Cozinha cozinha;


11.3. Criando classes de mixin para usar as anotações do Jackson

Mixin é uma classe que possui membros de uma outra classe original.

Onde a configuração ficam na classe Mixin.

@Component
public class JacksonMixinModule extends SimpleModule{

	private static final long serialVersionUID = 1L;
	
	public JacksonMixinModule() {
		setMixInAnnotation(Restaurante.class, RestauranteMixin.class);
		setMixInAnnotation(Cozinha.class, CozinhaMixin.class);
		setMixInAnnotation(Cidade.class, CidadeMixin.class);
	}
}

11.5. Antes de estudar sobre data/hora: relembrando as aulas de geografia e entendendo os fusos horários

timezone = fuso horario

offset = diferença de horarios

utc = padrão de horario universal

gmt = horario de granuich 

brt = horario de brasilia  | brt = utc - 3 



11.6. Boas práticas para trabalhar com data e hora em REST APIs

{
	"lastLoginDate":"12/10/2019 02:00"
}

// trabalhar com datas e horas não é algo simples
// existe uma padrão

5 leis
1) ISO-8601 para formatar data/hora
	fornecer um método bem definido para trabalhar com data e hora
{
	"lastLoginDate":"2019-10-12T14:15:28"
			 ano-mes-diaThora:minuto:segundo			 
}

{	// offset do utc
	"lastLoginDate":"2019-10-12T14:15:28-03:00"
			 ano-mes-diaThora:minuto:segundo-hora:minuto		 
}


{	// hora exata no utc
	"lastLoginDate":"2019-10-12T14:15:28Z"
			 ano-mes-diaThora:minuto:segundoZ		 
}

2) Aceite qualquer fusohorario para sua api
	// a api deve aceitar o formato vindo do usuario

3) Armazene em UTC

4) Retorne em UTC

5) Não inclua o horário se não for necessário


11.7. Configurando e refatorando o projeto para usar UTC

mudando timezone do Sistema:

public static void main(String[] args) {
		TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
		SpringApplication.run(AlgafoodApplication.class, args);
	}
































