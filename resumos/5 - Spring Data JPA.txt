5.1. Implementando consultas JPQL em repositórios

JPQL -> Linguagem de consultas do JPA

Repositorio utilizando JPA:

@Repository 
public interface RepositorioTipo  extends JpaRepository <T, ID> {}

// onde T:Tipo 
// ID:Tipo Da chave primaria(id)

O JpaRepository é uma interface que faz parte do Spring Data JPA, 
que é um framework que facilita a implementação do padrão de persistência
 de dados usando a API JPA. Alguns dos principais métodos disponíveis no JpaRepository são:

= save(T entity): salva ou atualiza uma entidade no banco de dados.
 Se a entidade já existir no banco de dados, ela é atualizada; caso contrário,
 uma nova linha é inserida na tabela correspondente.

= deleteById(ID id): exclui uma entidade do banco de dados com base no seu ID.

= findById(ID id): busca uma entidade no banco de dados com base no seu ID.

= findAll(): busca todas as entidades no banco de dados e retorna uma lista com elas.

= count(): retorna o número total de entidades no banco de dados.

= existsById(ID id): verifica se uma entidade com o ID fornecido existe no banco de dados.

Esses são apenas alguns dos métodos disponíveis no JpaRepository.
 Existem muitos outros, incluindo métodos para fazer consultas mais
 complexas e personalizadas no banco de dados, por exemplo, usando as
 palavras-chave findBy e query. Além disso, o JpaRepository também oferece
 suporte para paginação e ordenação dos resultados. Em geral, o objetivo principal
 do JpaRepository é fornecer uma interface simples e intuitiva para realizar
 operações de persistência de dados em um banco de dados usando a API JPA.

5.6. Criando consultas com query methods

*Método buscando pelo nome exato da propriedade:

// "nome" é um atributo dentro de Cozinha por isso funcionou, 
caso fosse outro nome não funcionaria.

	List<Cozinha> nome(String nome); // Consulta Exata

prefixo: "findBy" (buscarPor+nomeAtributo) 

	List<Cozinha> findByNome(String nome); // Consulta Exata

// ignorando o que existentre "find" e "by" poderiamos por exemplo
					    por um nome melhor para
					    o método.

	List<Cozinha> findQUALQUERCOISAByNome(String nome); // Consulta Exata

// Na ideia de encontrar UMA ou NENHUMA:

	Optional<Cozinha> findByNome(String nome);
 

5.7. Usando as keywords para definir critérios de query methods

Palavra Chave: 
---------
Containing -> Busca todos que possuem a letra tal.
List<?> findByTxtContaining(String txt);

---------
Between -> Quero apenas o vlaor que está entre esses valores das variaveis
List<Restaurante> findByTaxaFreteBetween (BigDecimal taxaInicial, BigDecimal taxaFinal);


GET: http://127.0.0.1:8080/testes/restaurantes/por-taxa-frete?taxaInicial=10&taxaFinal=20


----------
And -> encontrando por letras e pelo Id da Cozinha relacionada a esse restaurante
List<Restaurante> findByNomeContainingAndCozinhaId (String nome, Long cozinha);


5.8. Conhecendo os prefixos de query methods

prefixos:
// esses servem para mesma coisa
find / read / get / query / stream

// flag pós prefixo
read"Flag"By 
Flags: 	First(primeiro) 
   	TopNumero: Top2 (primeiros2)
	Last(Ultimo)
	exists(retorna se existe, deve ser um metodo com retorno boolean)
	count (retorno numeral, diz quantos existe: int)

Optional<Restaurante> findFirstByNomeContaining(String nome);

5.9. Usando queries JPQL customizadas com @Query

List<Restaurante> findByNomeContainingAndCozinhaId (String nome, Long cozinha);
Isso, vira isso :

@Query("from Restaurante where nome like %:nome% and cozinha.id = :id")
List<Restaurante> consultarPorNome (String nome,@Param("id") Long cozinhaId);

5.10. Externalizando consultas JPQL para um arquivo XML

resources: new folder -> META-INF -> new file -> orm.xml

<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings
	xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd"
    version="2.2">
	
	<named-query name="Entidade.metodoRepositorio">
		<query>
			CONSULTA JPQ
		</query>
	</named-query>
	
</entity-mappings>


OBS: % nao funciona no xml, entao temos fazer um concat exemplo:

		utilize isso:

		<query>
			from Restaurante 
			where nome 
			like concat('%', :nome, '%')
			and 
			cozinha.id = :id
		</query>

		ao inves disso:

		<query>
		from Restaurante 
		where nome 
		like concat %:nome%
		and 
		cozinha.id = :id
		</query>













