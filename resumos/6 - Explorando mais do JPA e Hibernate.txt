6.1. Mapeando relacionamento bidirecional com @OneToMany

Atual: 

@ManyToOne
Restaurante -> Cozinha

@OneToMany
Restaurante <-> Cozinha


Adicionando novo atributo na classe cozinha:

// Uma cozinha tem muitos restaurante
@JsonIgnore // Para envitar essa propriedade para que não entre num loop circular
@OneToMany(mappedBy="cozinha")  // Querendo saber qual nome do atributo mapeado em Restaurante
private List<Restaurante> restaurantes = new ArrayList<>();


6.2. Mapeando relacionamento muitos-para-muitos com @ManyToMany

// Muitos para Muitos 
ex: 
// Muitos Restaurantes possuem Muitas formas de pagamento

	@ManyToMany // O JoinColumns define as colunas da chave estrangeira, na tabela intermediaria,
	@JoinTable(name="restaurante_forma_pagamento",
			joinColumns = @JoinColumn(name="restaurante_id"),
			inverseJoinColumns = @JoinColumn(name="forma_pagamento_id")) // Costumizando nome da tabela do relacionamento
	private List<FormaPagamento> formasPagamento = new ArrayList<>();
	

6.3. Analisando o impacto do relacionamento muitos-para-muitos na REST API

Quando alteramos (PUT) a Entidade Restaurante, podemos perceber que 
perdemos dados da "forma_pagamento". 

-> Em RestauranteController, em atualizar(), quando
chamamos o "BeanUtilis.CopyProperties(restaurante, restauranteAtual, "id");"

teremos que incrementar mais um item:

BeanUtilis.CopyProperties(restaurante, restauranteAtual, "id", "formaPagamento");

6.4. Mapeando classes incorporáveis com @Embedded e @Embeddable

criar uma nova Classe Endereço que será compartilha em Restaurante e Pedido 

	@Embeddable
Devemos incorporar o Endereço á entidade Restaurante


@Data
@Embeddable				// classe incoporavel, ou seja, parte de alguma entidade
public class Endereco {
	
	@Column(name="endereco_cep")
	private String cep;
	
	@Column(name="endereco_logradouro")
	private String logradouro;
	
	@Column(name="endereco_numero")
	private String numero;
	
	@Column(name="endereco_complemento")
	private String complemento;
	
	@Column(name="endereco_bairro")
	private String bairro;
	
	@ManyToOne
	@JoinColumn(name="endereco_cidade_id")
	private Cidade cidade;
	
}


Agora na classe restaurante adicionamos o Atributo: endereco
-> 
@Embedded	//essa propriedade é uma classe do tipo incoporada. 
private Endereco endereco;


6.5. Testando e analisando o impacto da incorporação de classe na REST API

adicionando import SQL, para adicionar endereços ao Restaurante


------------------------------

insert into cozinha (id, nome) values (1, 'Tailandesa');
insert into cozinha (id, nome) values (2, 'Indiana');

insert into estado (id, nome) values (1, 'Minas Gerais');
insert into estado (id, nome) values (2, 'São Paulo');
insert into estado (id, nome) values (3, 'Ceará');

------------------------------
// preciso cadastrar as cidades antes do Restaurante pois existe uma Chave Estrangeira

------------------------------
insert into cidade (id, nome, estado_id) values (1, 'Uberlândia', 1);
insert into cidade (id, nome, estado_id) values (2, 'Belo Horizonte', 1);
insert into cidade (id, nome, estado_id) values (3, 'São Paulo', 2);
insert into cidade (id, nome, estado_id) values (4, 'Campinas', 2);
insert into cidade (id, nome, estado_id) values (5, 'Fortaleza', 3);

insert into restaurante (id, nome, taxa_frete, cozinha_id, endereco_cidade_id, endereco_cep, endereco_logradouro, endereco_numero, endereco_bairro) values (1, 'Thai Gourmet', 10, 1, 1, '38400-999', 'Rua João Pinheiro', '1000', 'Centro');
insert into restaurante (id, nome, taxa_frete, cozinha_id) values (2, 'Thai Delivery', 9.50, 1);
insert into restaurante (id, nome, taxa_frete, cozinha_id) values (3, 'Tuk Tuk Comida Indiana', 15, 2);

insert into forma_pagamento (id, descricao) values (1, 'Cartão de crédito');
insert into forma_pagamento (id, descricao) values (2, 'Cartão de débito');
insert into forma_pagamento (id, descricao) values (3, 'Dinheiro');

insert into permissao (id, nome, descricao) values (1, 'CONSULTAR_COZINHAS', 'Permite consultar cozinhas');
insert into permissao (id, nome, descricao) values (2, 'EDITAR_COZINHAS', 'Permite editar cozinhas');

insert into restaurante_forma_pagamento (restaurante_id, forma_pagamento_id) values (1, 1), (1, 2), (1, 3), (2, 3), (3, 2), (3, 3);
------------------------------

-> ignorando o endereco completo da representação com @JsonIgnore 

-> Quando tentamos atualizar um Restaurante acabamos apagando o enderço,
para resolver temos que:

-> Em RestauranteController, em atualizar(), quando
chamamos o "BeanUtilis.CopyProperties(restaurante, restauranteAtual, "id", "formaPagamento");"

teremos que incrementar mais um item:

BeanUtilis.CopyProperties(restaurante, restauranteAtual, "id", "formaPagamento","endereco");




6.6. Mapeando propriedades com @CreationTimestamp e @UpdateTimestamp


Trabalhando com DATAS


Adicionando na classe Restaurante:

@CreationTimestamp 	// Hibernate.annotations | Define que na hora que os atributos forem salvos
					 na Entidade pela primeira vez terá a data do primeiro cadastro
@Column(nullable=false, columnDefinition = "datetime")
private LocalDateTime dataCadastro;

OBS: columnDefinition = "datetime" // é para não retornar a precisão em milisseconds

@UpdateTimestamp		// toda vez que for alterado irá ser salvo
@Column(nullable=false, columnDefinition = "datetime")
private LocalDateTime dataAtualizacao;

------------------ import.sql ----------------
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao, endereco_cidade_id, endereco_cep, endereco_logradouro, endereco_numero, endereco_bairro) values (1, 'Thai Gourmet', 10, 1, utc_timestamp, utc_timestamp, 1, '38400-999', 'Rua João Pinheiro', '1000', 'Centro');
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (2, 'Thai Delivery', 9.50, 1, utc_timestamp, utc_timestamp);
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (3, 'Tuk Tuk Comida Indiana', 15, 2, utc_timestamp, utc_timestamp);
Obs: utc_timestamp,  pega a data e hora atual.
-----------------------------------------------

Em Restuarante Controle no método de atualizar:

BeanUtils.copyProperties(restaurante, restauranteAtual, "id","formasPagamento","endereco","dataCadastro","dataAtualizacao");

6.7. Desafio: mapeando relacionamento muitos-para-um

@Data
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@Entity
public class Produto {
	
	@EqualsAndHashCode.Include
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@Column(nullable=false)
	private String nome;
	
	@Column(nullable=false)
	private String descricao;
	
	@Column(nullable=false)
	private BigDecimal preco;
	
	@Column(nullable=false)
	private Boolean ativo;
	
	@ManyToOne
	@JoinColumn(nullable=false)
	private Restaurante restaurante;

}


6.8. Desafio: mapeando relacionamento um-para-muitos

Classe restaurante:

@JsonIgnore
@OneToMany(mappedBy = "restaurante")
private List<Produto> produtos;

Lembre de alterar no Restaurante Controller no método atualizar:

BeanUtils.copyProperties(restaurante, restauranteAtual, 
						"id", "formasPagamento", "endereco", "dataCadastro", "produtos");

----------------------------------------------------------------

Novo Import.sql

insert into cozinha (id, nome) values (1, 'Tailandesa');
insert into cozinha (id, nome) values (2, 'Indiana');
insert into cozinha (id, nome) values (3, 'Argentina');
insert into cozinha (id, nome) values (4, 'Brasileira');

insert into estado (id, nome) values (1, 'Minas Gerais');
insert into estado (id, nome) values (2, 'São Paulo');
insert into estado (id, nome) values (3, 'Ceará');

insert into cidade (id, nome, estado_id) values (1, 'Uberlândia', 1);
insert into cidade (id, nome, estado_id) values (2, 'Belo Horizonte', 1);
insert into cidade (id, nome, estado_id) values (3, 'São Paulo', 2);
insert into cidade (id, nome, estado_id) values (4, 'Campinas', 2);
insert into cidade (id, nome, estado_id) values (5, 'Fortaleza', 3);

insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao, endereco_cidade_id, endereco_cep, endereco_logradouro, endereco_numero, endereco_bairro) values (1, 'Thai Gourmet', 10, 1, utc_timestamp, utc_timestamp, 1, '38400-999', 'Rua João Pinheiro', '1000', 'Centro');
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (2, 'Thai Delivery', 9.50, 1, utc_timestamp, utc_timestamp);
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (3, 'Tuk Tuk Comida Indiana', 15, 2, utc_timestamp, utc_timestamp);
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (4, 'Java Steakhouse', 12, 3, utc_timestamp, utc_timestamp);
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (5, 'Lanchonete do Tio Sam', 11, 4, utc_timestamp, utc_timestamp);
insert into restaurante (id, nome, taxa_frete, cozinha_id, data_cadastro, data_atualizacao) values (6, 'Bar da Maria', 6, 4, utc_timestamp, utc_timestamp);

insert into forma_pagamento (id, descricao) values (1, 'Cartão de crédito');
insert into forma_pagamento (id, descricao) values (2, 'Cartão de débito');
insert into forma_pagamento (id, descricao) values (3, 'Dinheiro');

insert into permissao (id, nome, descricao) values (1, 'CONSULTAR_COZINHAS', 'Permite consultar cozinhas');
insert into permissao (id, nome, descricao) values (2, 'EDITAR_COZINHAS', 'Permite editar cozinhas');

insert into restaurante_forma_pagamento (restaurante_id, forma_pagamento_id) values (1, 1), (1, 2), (1, 3), (2, 3), (3, 2), (3, 3), (4, 1), (4, 2), (5, 1), (5, 2), (6, 3);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Porco com molho agridoce', 'Deliciosa carne suína ao molho especial', 78.90, 1, 1);
insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Camarão tailandês', '16 camarões grandes ao molho picante', 110, 1, 1);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Salada picante com carne grelhada', 'Salada de folhas com cortes finos de carne bovina grelhada e nosso molho especial de pimenta vermelha', 87.20, 1, 2);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Garlic Naan', 'Pão tradicional indiano com cobertura de alho', 21, 1, 3);
insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Murg Curry', 'Cubos de frango preparados com molho curry e especiarias', 43, 1, 3);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Bife Ancho', 'Corte macio e suculento, com dois dedos de espessura, retirado da parte dianteira do contrafilé', 79, 1, 4);
insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('T-Bone', 'Corte muito saboroso, com um osso em formato de T, sendo de um lado o contrafilé e do outro o filé mignon', 89, 1, 4);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Sanduíche X-Tudo', 'Sandubão com muito queijo, hamburger bovino, bacon, ovo, salada e maionese', 19, 1, 5);

insert into produto (nome, descricao, preco, ativo, restaurante_id) values ('Espetinho de Cupim', 'Acompanha farinha, mandioca e vinagrete', 8, 1, 6);

----------------------------------------------------------------


6.9. Desafio: mapeando relacionamentos muitos-para-muitos
@Data
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@Entity
public class Grupo {
	@EqualsAndHashCode.Include
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@Column(nullable = false)
	private String nome;
	
	@ManyToMany
	@JoinTable(name="grupo_permissao",joinColumns = @JoinColumn(name="grupo_id"),inverseJoinColumns = @JoinColumn(name="permissao_id"))
	private List<Permissao> permissoes = new ArrayList<>();
}


@Data
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@Entity
public class Usuario {
	
	@EqualsAndHashCode.Include
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@Column(nullable=false)
	private String nome;
	
	@Column(nullable=false)
	private String email;
	
	@Column(nullable=false)
	private String senha;
	
	@CreationTimestamp
	@Column(nullable=false, columnDefinition = "datetime")
	private LocalDateTime dataCadastro;
	
	@ManyToMany
	@JoinTable(name="usuario_grupo",joinColumns = @JoinColumn(name="usuario_id"),inverseJoinColumns = @JoinColumn(name="grupo_id"))
	private List<Grupo> grupos = new ArrayList<>();
	
}

6.10. Entendendo o Eager('ansioso/antecipado') Loading

Eager Load é o mecanismo pelo qual uma associação, 
coleção ou atributo é carregado imediatamente quando o 
objeto principal é carregado. Dessa forma todas as relações 
de uma entidade serão carregadas no mesmo momento em que 
esta entidade é carregada.


Obs:

Por PADRÃO: Todas a @Annotations que fazem associação 'ToOne' (ex:ManyToOne),
usa a estratégia por padrão Eager Loading;

Todas vez que uma instancia é carregada, ele carrega também as
associações Eager Loading.

6.11. Entendendo o Lazy(preguiçoso) Loading

Um carregamento que só vai acontecer quando necessário.
// Carregamento por demanda

Lazy loading é um padrão de projeto de software, comumente 
utilizado em linguagens de programação, para adiar a inicialização 
de um objeto até o ponto em que ele é necessário. Isso pode contribuir 
para a eficiência no funcionamento de um programa, se utilizado adequadamente.


Por PADRÃO: Todas a @Annotations que fazem associação 'ToMany' (ex:ManyToMany),
usa a estratégia por padrão Lazy Loading;


6.12. Alterando a estratégia de fetching para Lazy Loading


@JsonIgnore
@JoinColumn(name="cozinha_id",nullable=false)
@ManyToOne(fetch=FetchType.LAZY)
private Cozinha cozinha;

porém dessa forma da erro, então temos que não Serializar uma classe que da erro: hibernateLazyInitializer

@JsonIgnoreProperties({"propriedades",...}): Ignorando propriedades especificas.

//@JsonIgnore
@JsonIgnoreProperties({"hibernateLazyInitializer"})
@ManyToOne(fetch=FetchType.LAZY)
@JoinColumn(name="cozinha_id",nullable=false)
private Cozinha cozinha;

6.13. Alterando a estratégia de fetching para Eager Loading

	@JsonIgnore
	@ManyToMany(fetch=FetchType.EAGER)
	@JoinTable(name="restaurante_forma_pagamento",
	joinColumns = @JoinColumn(name="restaurante_id"),
		inverseJoinColumns = @JoinColumn(name="forma_pagamento_id"))
	private List<FormaPagamento> formasPagamento = new ArrayList<>();






















