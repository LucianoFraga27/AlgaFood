6.1. Mapeando relacionamento bidirecional com @OneToMany

Atual: 

@ManyToOne
Restaurante -> Cozinha

@OneToMany
Restaurante <-> Cozinha


Adicionando novo atributo na classe cozinha:

// Uma cozinha tem muitos restaurante
@JsonIgnore // Para envitar essa propriedade para que não entre num loop circular
@OneToMany(mappedBy="cozinha")  // Querendo saber qual nome do atributo mapeado em Restaurante
private List<Restaurante> restaurantes = new ArrayList<>();


6.2. Mapeando relacionamento muitos-para-muitos com @ManyToMany

// Muitos para Muitos 
ex: 
// Muitos Restaurantes possuem Muitas formas de pagamento

	@ManyToMany // O JoinColumns define as colunas da chave estrangeira, na tabela intermediaria,
	@JoinTable(name="restaurante_forma_pagamento",
			joinColumns = @JoinColumn(name="restaurante_id"),
			inverseJoinColumns = @JoinColumn(name="forma_pagamento_id")) // Costumizando nome da tabela do relacionamento
	private List<FormaPagamento> formasPagamento = new ArrayList<>();
	

6.3. Analisando o impacto do relacionamento muitos-para-muitos na REST API

Quando alteramos (PUT) a Entidade Restaurante, podemos perceber que 
perdemos dados da "forma_pagamento". 

-> Em RestauranteController, em atualizar(), quando
chamamos o "BeanUtilis.CopyProperties(restaurante, restauranteAtual, "id");"

teremos que incrementar mais um item:

BeanUtilis.CopyProperties(restaurante, restauranteAtual, "id", "formaPagamento");

6.4. Mapeando classes incorporáveis com @Embedded e @Embeddable

criar uma nova Classe Endereço que será compartilha em Restaurante e Pedido 

	@Embeddable
Devemos incorporar o Endereço á entidade Restaurante


@Data
@Embeddable				// classe incoporavel, ou seja, parte de alguma entidade
public class Endereco {
	
	@Column(name="endereco_cep")
	private String cep;
	
	@Column(name="endereco_logradouro")
	private String logradouro;
	
	@Column(name="endereco_numero")
	private String numero;
	
	@Column(name="endereco_complemento")
	private String complemento;
	
	@Column(name="endereco_bairro")
	private String bairro;
	
	@ManyToOne
	@JoinColumn(name="endereco_cidade_id")
	private Cidade cidade;
	
}


Agora na classe restaurante adicionamos o Atributo: endereco
-> 
@Embedded	//essa propriedade é uma classe do tipo incoporada. 
private Endereco endereco;


6.5. Testando e analisando o impacto da incorporação de classe na REST API

adicionando import SQL, para adicionar endereços ao Restaurante


------------------------------

insert into cozinha (id, nome) values (1, 'Tailandesa');
insert into cozinha (id, nome) values (2, 'Indiana');

insert into estado (id, nome) values (1, 'Minas Gerais');
insert into estado (id, nome) values (2, 'São Paulo');
insert into estado (id, nome) values (3, 'Ceará');

------------------------------
// preciso cadastrar as cidades antes do Restaurante pois existe uma Chave Estrangeira

------------------------------
insert into cidade (id, nome, estado_id) values (1, 'Uberlândia', 1);
insert into cidade (id, nome, estado_id) values (2, 'Belo Horizonte', 1);
insert into cidade (id, nome, estado_id) values (3, 'São Paulo', 2);
insert into cidade (id, nome, estado_id) values (4, 'Campinas', 2);
insert into cidade (id, nome, estado_id) values (5, 'Fortaleza', 3);

insert into restaurante (id, nome, taxa_frete, cozinha_id, endereco_cidade_id, endereco_cep, endereco_logradouro, endereco_numero, endereco_bairro) values (1, 'Thai Gourmet', 10, 1, 1, '38400-999', 'Rua João Pinheiro', '1000', 'Centro');
insert into restaurante (id, nome, taxa_frete, cozinha_id) values (2, 'Thai Delivery', 9.50, 1);
insert into restaurante (id, nome, taxa_frete, cozinha_id) values (3, 'Tuk Tuk Comida Indiana', 15, 2);

insert into forma_pagamento (id, descricao) values (1, 'Cartão de crédito');
insert into forma_pagamento (id, descricao) values (2, 'Cartão de débito');
insert into forma_pagamento (id, descricao) values (3, 'Dinheiro');

insert into permissao (id, nome, descricao) values (1, 'CONSULTAR_COZINHAS', 'Permite consultar cozinhas');
insert into permissao (id, nome, descricao) values (2, 'EDITAR_COZINHAS', 'Permite editar cozinhas');

insert into restaurante_forma_pagamento (restaurante_id, forma_pagamento_id) values (1, 1), (1, 2), (1, 3), (2, 3), (3, 2), (3, 3);
------------------------------




