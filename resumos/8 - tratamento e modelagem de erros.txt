8.2. Lançando exceções customizadas anotadas com @ResponseStatus


Devolvendo código de Status HTTP


 * Trabalhando com exceptions de forma menos burocratica. *

dentro da classe da exception anote ela com @ResponseStatus

ex: 
@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = "Entidade não encontrada")
public class EntidadeNaoEncontradaException  extends RuntimeException{ }

@ResponseStatus(HttpStatus.CONFLICT)
public class EntidadeEmUsoException extends RuntimeException{}

novo delete mapping:

	@DeleteMapping("/{cozinhaId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void remover(@PathVariable Long cozinhaId) {
			cozinhaService.excluir(cozinhaId);
	}

Observação no código acima os tratamentos de excessões são feitos
por conta da referencia em CadastroCozinhaService.



8.3. Lançando exceções do tipo ResponseStatusException

Devolvendo código de Status HTTP

classe de exception que serve de exception base.

-> ReponseStatusException

em CozinhaService:

try {
	cozinhaRepository.deleteById(id);		
} catch(EmptyResultDataAccessException e) {
	throw new ResponseStatusException(HttpStatus.NOT_FOUND, String.format("Cozinha de código '%d' não foi encontrada", id));
}

-> As classes de dominio não podem ter contato com código http.


8.4. Estendendo ResponseStatusException

public class EntidadeNaoEncontradaException extends ResponseStatusException {

	private static final long serialVersionUID = 1L;

	public EntidadeNaoEncontradaException(HttpStatus status, String mensagem) {
		super(status, mensagem);

	}

	public EntidadeNaoEncontradaException(String mensagem) {
		this(HttpStatus.NOT_FOUND, mensagem);
	}
}

@Service
public class CadastroCozinhaService {

	@Autowired
	CozinhaRepository cozinhaRepository;

	public Cozinha salvar(Cozinha cozinha) {
		return cozinhaRepository.save(cozinha);
	}

	public void excluir(Long id) {
		try {
			cozinhaRepository.deleteById(id);
			
		} catch(EmptyResultDataAccessException e) {
			
			throw new EntidadeNaoEncontradaException(String.format("Cozinha de código '%d' não foi encontrada", id));
			
		} catch (DataIntegrityViolationException e) {
			throw new EntidadeEmUsoException(String.format("Cozinha de código '%d' não pode ser removida, pois está em uso", id));
		}
	}
}

Controller:

@DeleteMapping("/{cozinhaId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void remover(@PathVariable Long cozinhaId) {
		cozinhaService.excluir(cozinhaId);
	}


// vantagem:
-> quem lança a exception consegue costumizar o código HTTP


8.5. Simplificando o código com o uso de @ResponseStatus em exceptions

Novo Controller:


	// Listando em JSON
	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	public List<Cozinha> listar() {
		return cozinhaRepository.findAll();
	}

	// Buscando por ID
	@GetMapping("/{cozinhaId}")
	public Cozinha buscar(@PathVariable Long cozinhaId) {
		return cozinhaService.buscarOuFalhar(cozinhaId);

	}

	// Adicionando JSON
	@PostMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.CREATED)
	public Cozinha adicionar(@RequestBody Cozinha cozinha) {
		return cozinhaRepository.save(cozinha);
	}

	// Editando
	@PutMapping("/{cozinhaId}")
	public Cozinha atualizar(@PathVariable Long cozinhaId, @RequestBody Cozinha cozinha) {

		Cozinha cozinhaAtual = cozinhaService.buscarOuFalhar(cozinhaId);
		BeanUtils.copyProperties(cozinha, cozinhaAtual, "id");
		return cozinhaService.salvar(cozinhaAtual);

	}

	// Excluindo
	@DeleteMapping("/{cozinhaId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void remover(@PathVariable Long cozinhaId) {
		cozinhaService.excluir(cozinhaId);
	}
}


Novo método em CadastroCozinhaService:

public Cozinha buscarOuFalhar(Long cozinhaId) {
		return cozinhaRepository.findById(cozinhaId).orElseThrow(() -> new EntidadeNaoEncontradaException(
				String.format(MSG_COZINHA_NAO_ENCONTRADA, cozinhaId)));
	}



8.8. Criando a exception NegocioException

é notavel que a qual tentar criar uma cozinha num estado não existente
o código do http retorna 404. vamos resolver esse problema.






























 











