8.2. Lançando exceções customizadas anotadas com @ResponseStatus


Devolvendo código de Status HTTP


 * Trabalhando com exceptions de forma menos burocratica. *

dentro da classe da exception anote ela com @ResponseStatus

ex: 
@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = "Entidade não encontrada")
public class EntidadeNaoEncontradaException  extends RuntimeException{ }

@ResponseStatus(HttpStatus.CONFLICT)
public class EntidadeEmUsoException extends RuntimeException{}

novo delete mapping:

	@DeleteMapping("/{cozinhaId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void remover(@PathVariable Long cozinhaId) {
			cozinhaService.excluir(cozinhaId);
	}

Observação no código acima os tratamentos de excessões são feitos
por conta da referencia em CadastroCozinhaService.



8.3. Lançando exceções do tipo ResponseStatusException

Devolvendo código de Status HTTP

classe de exception que serve de exception base.

-> ReponseStatusException

em CozinhaService:

try {
	cozinhaRepository.deleteById(id);		
} catch(EmptyResultDataAccessException e) {
	throw new ResponseStatusException(HttpStatus.NOT_FOUND, String.format("Cozinha de código '%d' não foi encontrada", id));
}

-> As classes de dominio não podem ter contato com código http.


8.4. Estendendo ResponseStatusException

public class EntidadeNaoEncontradaException extends ResponseStatusException {

	private static final long serialVersionUID = 1L;

	public EntidadeNaoEncontradaException(HttpStatus status, String mensagem) {
		super(status, mensagem);

	}

	public EntidadeNaoEncontradaException(String mensagem) {
		this(HttpStatus.NOT_FOUND, mensagem);
	}
}

@Service
public class CadastroCozinhaService {

	@Autowired
	CozinhaRepository cozinhaRepository;

	public Cozinha salvar(Cozinha cozinha) {
		return cozinhaRepository.save(cozinha);
	}

	public void excluir(Long id) {
		try {
			cozinhaRepository.deleteById(id);
			
		} catch(EmptyResultDataAccessException e) {
			
			throw new EntidadeNaoEncontradaException(String.format("Cozinha de código '%d' não foi encontrada", id));
			
		} catch (DataIntegrityViolationException e) {
			throw new EntidadeEmUsoException(String.format("Cozinha de código '%d' não pode ser removida, pois está em uso", id));
		}
	}
}

Controller:

@DeleteMapping("/{cozinhaId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void remover(@PathVariable Long cozinhaId) {
		cozinhaService.excluir(cozinhaId);
	}


// vantagem:
-> quem lança a exception consegue costumizar o código HTTP


8.5. Simplificando o código com o uso de @ResponseStatus em exceptions

Novo Controller:


	// Listando em JSON
	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	public List<Cozinha> listar() {
		return cozinhaRepository.findAll();
	}

	// Buscando por ID
	@GetMapping("/{cozinhaId}")
	public Cozinha buscar(@PathVariable Long cozinhaId) {
		return cozinhaService.buscarOuFalhar(cozinhaId);

	}

	// Adicionando JSON
	@PostMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.CREATED)
	public Cozinha adicionar(@RequestBody Cozinha cozinha) {
		return cozinhaRepository.save(cozinha);
	}

	// Editando
	@PutMapping("/{cozinhaId}")
	public Cozinha atualizar(@PathVariable Long cozinhaId, @RequestBody Cozinha cozinha) {

		Cozinha cozinhaAtual = cozinhaService.buscarOuFalhar(cozinhaId);
		BeanUtils.copyProperties(cozinha, cozinhaAtual, "id");
		return cozinhaService.salvar(cozinhaAtual);

	}

	// Excluindo
	@DeleteMapping("/{cozinhaId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void remover(@PathVariable Long cozinhaId) {
		cozinhaService.excluir(cozinhaId);
	}
}


Novo método em CadastroCozinhaService:

public Cozinha buscarOuFalhar(Long cozinhaId) {
		return cozinhaRepository.findById(cozinhaId).orElseThrow(() -> new EntidadeNaoEncontradaException(
				String.format(MSG_COZINHA_NAO_ENCONTRADA, cozinhaId)));
	}



8.8. Criando a exception NegocioException

é notavel que a qual tentar criar uma cozinha num estado não existente
o código do http retorna 404. vamos resolver esse problema.


@ResponseStatus(value = HttpStatus.BAD_REQUEST)
public class NegocioException extends RuntimeException {

	private static final long serialVersionUID = 1L;

	public NegocioException(String mensagem) {
		super(mensagem);
	}
}

Aplicação:

@PostMapping
	public Restaurante adicionar(@RequestBody Restaurante restaurante) {
		try {
			return restauranteService.salvar(restaurante);
		} catch (EntidadeNaoEncontradaException e) {
			throw new NegocioException(e.getMessage());
		}

	}


8.10. Afinando a granularidade e definindo a hierarquia das exceptions de negócios

Exception mais específica

public class EstadoNaoEncontradoException extends EntidadeNaoEncontradaException {
	
	private static final String MSG_ESTADO_NAO_ENCONTRADO = "Não existe um cadastro de estado com código %d";
	private static final long serialVersionUID = 1L;

	public EstadoNaoEncontradoException(String mensagem) {
		super(mensagem);
	}
	
	public EstadoNaoEncontradoException (Long estadoId) {
		this(String.format(MSG_ESTADO_NAO_ENCONTRADO, estadoId));
	}
}


8.12. Tratando exceções em nível de controlador com @ExceptionHandler

Da maneira das aulas anteriores não é possivel costumizar o Json de erro.

Criando a classe problema dentro de: api.exceptionhandler.Problema


@Getter
@Builder
public class Problema {

	private LocalDateTime dataHora;
	private String mensagem;
	
}




Controller:

@DeleteMapping("/{cidadeId}")
	public void remover(@PathVariable Long cidadeId) {
		cidadeService.excluir(cidadeId);

	}

	@ExceptionHandler({ EntidadeNaoEncontradaException.class })
	public ResponseEntity<?> tratarEstadoNaoEncontradoException(EntidadeNaoEncontradaException e) {

		Problema problema = Problema.builder().dataHora(LocalDateTime.now()).mensagem(e.getMessage()).build();

		return ResponseEntity.status(HttpStatus.NOT_FOUND).body(problema);

	}

	@ExceptionHandler({ NegocioException.class })
	public ResponseEntity<?> tratarNegocioException(NegocioException e) {
		
		Problema problema = Problema.builder().dataHora(LocalDateTime.now()).mensagem(e.getMessage()).build();
		
		return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(problema);
	}


Resposta do erro:
{
	"dataHora": "2023-03-29T16:32:38.5615392",
	"mensagem": "Não existe um cadastro de estado com código 15"
}


8.13. Tratando exceções globais com @ExceptionHandler e @ControllerAdvice

-> Da maneira que estamos fazendo cada controllador deveria ter um ExceptionHandler.
-> Vamos generalizar isso, para que não exista duplicação de código.

-> ExceptionHandler GLOBAL;


Criando a classe problema dentro de: api.exceptionhandler.ApiExceptionHandler

@ControllerAdvice -> Essa notação diz que dentro deste componente
		     nós podemos adicionar exceptions handler
		     que as exceções de todos os controladores 
		     de nosso projeto, serão tratadas por aqui.

@ControllerAdvice
class ApiExceptionHandler {

@ExceptionHandler({ EntidadeNaoEncontradaException.class })
	public ResponseEntity<?> tratarEstadoNaoEncontradoException(EntidadeNaoEncontradaException e) {

		Problema problema = Problema.builder().dataHora(LocalDateTime.now()).mensagem(e.getMessage()).build();

		return ResponseEntity.status(HttpStatus.NOT_FOUND).body(problema);

	}


}

8.15. Criando um exception handler global com ResponseEntityExceptionHandler

-> Será que precisamos tratar todas as exceptions internas individualmente? 
 -> Não pois temos uma classe que faz isso por nós.

ResponseEntityExceptionHandler : é uma classe de conveniencia que ja trata exceptions 
internas do spring mvc.

agora a class ApiExceptionHandler herda da classe ResponseEntityExceptionHandler .

@ControllerAdvice
class ApiExceptionHandler extends ResponseEntityExceptionHandler {}

por padrão o ResponseEntityExceptionHandler  não retorna resposta em seu corpo.

/*
código quebrou dia 30 março, 2023. Testando novo projeto 
*/

8.16. Customizando o corpo da resposta padrão de ResponseEntityExceptionHandler
@Override
	protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers,
			HttpStatus status, WebRequest request) {

		if (body == null) {
			body = Problema.builder().dataHora(LocalDateTime.now()).mensagem(status.getReasonPhrase()).build();
		} else if (body instanceof String) {
			body = Problema.builder().dataHora(LocalDateTime.now()).mensagem((String) body).build();
		}

		return super.handleExceptionInternal(ex, body, headers, status, request);
	}

@ExceptionHandler({ NegocioException.class })
	public ResponseEntity<?> tratarNegocioException(WebRequest request, NegocioException ex) {

		return handleExceptionInternal(ex, ex.getMessage(), new HttpHeaders(), HttpStatus.BAD_REQUEST, request);

	}


8.17. Conhecendo a RFC 7807 (Problem Details for HTTP APIs)

problem details for http Apis (rfc 7807)

existem especificações para tentar padronizar o corpo do erro:

jsonapi, vnd.error, problem detail for http apis.

{
"status":400,
"type": "https://algafood.com.br/recurso-em-uso",  // URI que identifica o tipo do problema e explica como resolver o problema.
"title": "Recurso em uso",
"detail": "Não foi possivel excluir a cozinha de código 8, pois ela está em uso",
"instance": "/cozinhas/8/erros/98204983"	   // Opicional // Podemos informar uma URI que identifica a correncia exata.

// podemos adicionar novas propriedades:

"timestamp":"2019-09-28T00:36:18"
"cozinha":8

}

# podemos expor detalhes internos do erro, como a stacktrace?
-> poder podemos, porém não é recomendado expor detalhes internos
numa api publica. Podemos acabar expondo dados privados.

# todas as respostas com erros precisam ter um corpo descrevendo
o problema?
-> Não necessáriamente, alguns erros são muito bem definidos.
Mesmo assim se possivel, retornar um corpo simples.

{
"status":415,
"title": "Unsupported Media Type",
}


Beneficios: 

-> Um formato unico para descrever o erros na API.
-> Facilita a manutenção e construção da API.


8.18. Padronizando o formato de problemas no corpo de respostas com a RFC 7807
# CRIANDO ENUM para definir o tipo do problema

@Getter
public enum ProblemType {
	
	ENTIDADE_NAO_ENCONTRADA("/entidade-nao-encontrada", "Entidade não encontrada");
	
	private String title;
	private String uri;
	
	ProblemType(String path, String title){
		this.uri="https://algafood.com.br" + path;
		this.title = title;
	}
}

# Criando método para facilitar criar a representação do problema

private Problem.ProblemBuilder createProblemBuilder(HttpStatus status, ProblemType problemType, String detail) {
			return Problem
				.builder()
				.status(status.value())
				.type(problemType.getUri())
				.title(problemType.getTitle())
				.detail(detail);
	}


# Na classe ApiExceptionHandler: Crio a instancia do problem utilizando o método createProblemBuilder

@ExceptionHandler({ EntidadeNaoEncontradaException.class })
	public ResponseEntity<?> handleEstadoNaoEncontradoException(WebRequest request, EntidadeNaoEncontradaException ex) {
		
		HttpStatus status = HttpStatus.NOT_FOUND;
		ProblemType problemType = ProblemType.ENTIDADE_NAO_ENCONTRADA;
		String detail = ex.getMessage();
		
		Problem problem = createProblemBuilder(status, problemType, detail)
										.build();
		
		return handleExceptionInternal(ex, problem, new HttpHeaders(), HttpStatus.NOT_FOUND, request);

	}
 

8.20. Customizando exception handlers de ResponseEntityExceptionHandler

Requisição com erro:

{
	"nome": "tradicao mineira",
	"taxaFrete": 13.00,
	"cozinha": {
		"id":"2",
	}
}

Código para alterar corpo do erro:

@Override
	protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
			
		ProblemType problemType = ProblemType.MESANGEM_INCOMPREENSIVEL;
		
		String detail = "O corpo da requisição está inválido. Verifique erro de sintaxe.";
		
		Problem problem = createProblemBuilder(status, problemType, detail).build();
		
		return handleExceptionInternal(ex, problem, new HttpHeaders(), status, request);
	}


8.21. Tratando a exception InvalidFormatException na desserialização

# Adicione essa dependencia para:

-> é uma biblioteca que fornece varios métodos
utilitarios para trabalhar de maneira mais 
simplificada com strings, numeros, exceptions.

ExceptionUtils.getRootCause(ex);

------------------------------------------------
<dependency>
	<groupId>org.apache.commons</groupId>
	<artifactId>commons-lang3</artifactId>
</dependency>
------------------------------------------------


Requisição com erro:

{
	"nome": "tradicao mineira",
	"taxaFrete": 13.00,
	"cozinha": {
		"id":"aaa"	// tipo de dado inserido é invalido
	}
}

Código para alterar corpo do erro:

@Override
	protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		
		Throwable rootCause = ExceptionUtils.getRootCause(ex);
		
		if(rootCause instanceof InvalidFormatException) {
			return handleInvalidFormatException((InvalidFormatException)rootCause,headers,status,request);
		}
		
		ProblemType problemType = ProblemType.MESANGEM_INCOMPREENSIVEL;
		
		String detail = "O corpo da requisição está inválido. Verifique erro de sintaxe.";
		
		Problem problem = createProblemBuilder(status, problemType, detail).build();
		
		return handleExceptionInternal(ex, problem, new HttpHeaders(), status, request);
	}
	
	
	private ResponseEntity<Object> handleInvalidFormatException(InvalidFormatException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		
		String path = ex.getPath().stream()
								  .map(ref -> ref.getFieldName())
								  .collect(Collectors.joining("."));
		
		ProblemType problemType = ProblemType.MESANGEM_INCOMPREENSIVEL;
		String detail = String.format("A propriedade ['%s'] recebeu o valor ['%s'], "
				+ "que é de um tipo inválido. Corrija e informe o valor compatível com o tipo ['%s'].",
				path,
				ex.getValue(),
				ex.getTargetType().getSimpleName());
		
		Problem problem = createProblemBuilder(status, problemType, detail).build();
		
		return handleExceptionInternal(ex, problem, new HttpHeaders(), status, request);
	}

Corpo do erro:

{
	"status": 400,
	"type": "https://algafood.com.br/mensagem-incompreensivel",
	"title": "Mensagem imcopreesível",
	"detail": "A propriedade ['cozinha.id'] recebeu o valor ['x'], que é de um tipo inválido. Corrija e informe o valor compatível com o tipo ['Long']."
}


8.22. Habilitando erros na desserialização de propriedades inexistentes ou ignoradas

# Enviando propriedade inexistente 


{
		"nome": "tradicao mineira",
		"taxaFrete": 13.00,
		"descricao":"abc",		// restaurante não possui descrição
		"cozinha": {
			"id":"x"
		}
}

# a requisição foi executada e os atributos que existem foram atualizados e os errados foram ignorados

# nesse caso fica a sua escolha se vai ou não retornar um erro.

# em application.properties adiocione essa configuração: 

-> spring.jackson.deserialization.fail-on-unknown-properties=true

# Enviando dados que existem porem não deviram aparecer pois eles estão notados com @JsonIgnore


{
	"nome": "tradicao mineira",
	"taxaFrete": 13.00,
	"endereco":{
		"cep":"123"
	},
	"cozinha": {
		"id":"1"
	}
}

# em application.properties adiocione essa configuração: 

spring.jackson.deserialization.fail-on-ignored-properties=true

8.24. Lançando exception de desserialização na atualização parcial (PATCH)

{
	"nome": "Cozinha teste",
	"endereco": {
		"cep":123
	}
}

Erro: IllegalArgumentException

# Lá no método merge dentro do restaurante controller: 

ObjectMapper objectMapper = new ObjectMapper();

objectMapper.configure(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES, true);	// quero falhar se a propriedade estiver sendo ignorada.
objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);	// quero falhar se a propriedade não existir

Novo método PATCH
----------------------------------------------------------------------------------------------------------------------------------------------------------
@PatchMapping("/{restauranteId}")
	public Restaurante atualizarParcial(@PathVariable Long restauranteId, @RequestBody Map<String, Object> campos, HttpServletRequest request) {

		Restaurante restauranteAtual = restauranteService.buscarOuFalhar(restauranteId);

		merge(campos, restauranteAtual, request);

		return atualizar(restauranteId, restauranteAtual);
	}

	private void merge(Map<String, Object> dadosOrigem, Restaurante restauranteDestino, HttpServletRequest request) {

		ServletServerHttpRequest serverHttpRequest = new ServletServerHttpRequest(request);
		
		try {
			ObjectMapper objectMapper = new ObjectMapper();

			objectMapper.configure(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES, true);
			objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);

			Restaurante restauranteOrigem = objectMapper.convertValue(dadosOrigem, Restaurante.class);

			System.out.println(restauranteOrigem);

			dadosOrigem.forEach((nomePropriedade, valorPropriedade) -> {

				Field field = ReflectionUtils.findField(Restaurante.class, nomePropriedade);

				field.setAccessible(true);

				Object novoValor = ReflectionUtils.getField(field, restauranteOrigem);

				// variavel que representa um atributo da classe Restaurante

				System.out.println(nomePropriedade + "  =  " + valorPropriedade + "  =  " + novoValor);

				ReflectionUtils.setField(field, restauranteDestino, novoValor);
			});

		} catch (IllegalArgumentException e) {
			Throwable rootCause = ExceptionUtils.getRootCause(e);
			throw new HttpMessageNotReadableException(e.getMessage(), rootCause, serverHttpRequest);
		}
	}

----------------------------------------------------------------------------------------------------------------------------------------------------------

8.26. Desafio: tratando a exceção NoHandlerFoundException

spring.mvc.throw-exception-if-no-handler-found=true	// lança uma exception se não existir uma pagina

spring.web.resources.add-mappings=false
// Essa propriedade configura o uso do gerenciador padrão de resources no Spring. Com ela ativada o Spring gerencia as respostas padrão de erro 404 por exemplo, impedindo o uso de um Exception Handler.























