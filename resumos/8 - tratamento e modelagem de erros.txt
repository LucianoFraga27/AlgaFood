8.2. Lançando exceções customizadas anotadas com @ResponseStatus

 * Trabalhando com exceptions de forma menos burocratica. *

dentro da classe da exception anote ela com @ResponseStatus

ex: 
@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = "Entidade não encontrada")
public class EntidadeNaoEncontradaException  extends RuntimeException{ }

@ResponseStatus(HttpStatus.CONFLICT)
public class EntidadeEmUsoException extends RuntimeException{}

novo delete mapping:

	@DeleteMapping("/{cozinhaId}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void remover(@PathVariable Long cozinhaId) {
			cozinhaService.excluir(cozinhaId);
	}

Observação no código acima os tratamentos de excessões são feitos
por conta da referencia em CadastroCozinhaService.



8.3. Lançando exceções do tipo ResponseStatusException

classe de exception que serve de exception base.

-> ReponseStatusException

em CozinhaService:

try {
	cozinhaRepository.deleteById(id);		
} catch(EmptyResultDataAccessException e) {
	throw new ResponseStatusException(HttpStatus.NOT_FOUND, String.format("Cozinha de código '%d' não foi encontrada", id));
}

-> As classes de dominio não podem ter contato com código http.






























